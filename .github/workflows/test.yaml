name: Github cloud run test

on:
  schedule:
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      test_plan_type:
        description: "Select the test plan"
        required: true
        type: choice
        options:
          - Smoke
          - Regression
        default: Regression

env:
  PROJECT: 'SwiftRadio.xcodeproj'
  SCHEME: 'SwiftRadioUITests'
  DERIVED_DATA_PATH: 'DerivedData'
  TEST_RESULTS: './TestResults.xcresult'
  ALLURE_RESULTS: 'allure-results'
  SIMULATOR_VERSION: '26.0'
  SIMULATOR_NAME: 'iPhone 16'

jobs:
  build:
    name: Build
    runs-on: [macos-15]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: resolve spm dependency
        run: xcodebuild -resolvePackageDependencies

      - name: Build Project
        id: build
        run: |
          set -o pipefail
          xcodebuild build-for-testing \
          -project ${{ env.PROJECT }} \
          -scheme ${{ env.SCHEME }} \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
          -destination 'platform=iOS Simulator,name=${{ env.SIMULATOR_NAME }},OS=${{ env.SIMULATOR_VERSION }}' \
          | xcbeautify --renderer github-actions
          
          mkdir TestData
          patterns=("*.xctest" "*.app" "*.xctestrun" "*.framework" "*.bundle")
          for pattern in "${patterns[@]}"; do 
            find "${{ env.DERIVED_DATA_PATH }}" -name "$pattern" -print | pax -rw -pe "TestData"; 
          done
          echo "artifacts_path=TestData/${{ env.DERIVED_DATA_PATH }}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.build.outputs.artifacts_path }}
          name: TestData
          retention-days: 30

  test:
    name: Run ${{ github.event.inputs.test_type }} tests
    runs-on: [macos-15]
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: TestData
          path: ${{ env.DERIVED_DATA_PATH }}

      - name: Download Allure Parser of XCResults
        run: |
          curl -OL https://github.com/eroshenkoam/xcresults/releases/download/1.19.0/xcresults
          chmod +x xcresults
          
      - name: Install Allure
        run: npm install -g allure

      - name: Run Ui Tests
        run: |
          if [ -z "${{ github.event.inputs.test_plan_type }}" ]; then
            xcodebuild test-without-building \
            -xctestrun DerivedData/Build/Products/SwiftRadioUITests_Regression_iphonesimulator18.0-arm64.xctestrun \
            -destination 'platform=iOS Simulator,name=${{ env.SIMULATOR_NAME }},OS=${{ env.SIMULATOR_VERSION }}' \
            -resultBundlePath ./TestResults.xcresult \
            | xcbeautify --renderer github-actions
          else
            xcodebuild test-without-building \
            -xctestrun DerivedData/Build/Products/SwiftRadioUITests_${{ github.event.inputs.test_plan_type }}_iphonesimulator18.0-arm64.xctestrun \
            -destination 'platform=iOS Simulator,name=${{ env.SIMULATOR_NAME }},OS=${{ env.SIMULATOR_VERSION }}' \
            -resultBundlePath ./TestResults.xcresult \
            | xcbeautify --renderer github-actions
          fi
        continue-on-error: true

      - name: Set env for allure
        run: |
          MARKETING_VERSION=$(xcodebuild -showBuildSettings | grep MARKETING_VERSION | awk '{print $3}')
          echo "MARKETING_VERSION=$MARKETING_VERSION" >> $GITHUB_ENV
          BUILD_VERSION=$(xcodebuild -showBuildSettings | grep CURRENT_PROJECT_VERSION | awk '{print $3}')
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          ALLURE_VERSION=$(allure --version)
          echo "ALLURE_VERSION=$ALLURE_VERSION" >> $GITHUB_ENV

      - name: Generate Allure files
        run: |
          mkdir ${{ env.ALLURE_RESULTS }}
          ./xcresults export TestResults.xcresult -o ${{ env.ALLURE_RESULTS }}
          chmod +x scripts/testOpsReportFormatter.sh
          scripts/testOpsReportFormatter.sh
          chmod +x scripts/createAllureEnvironment.sh
          scripts/createAllureEnvironment.sh
          mkdir allure-report
          allure generate ${{ env.ALLURE_RESULTS }} -o allure-report

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: |
            allure-report/
          retention-days: 1

      - name: Upload XCResult
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: ./TestResults.xcresult
          retention-days: 1

  report:
    runs-on: [ubuntu-latest]
    name: Report to Allure
    needs: test
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

  notification:
    runs-on: macos-15
    needs: test
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: TestResults
          path: ./TestResults.xcresult

      - name: Parse and send results to Telegram
        run: |
          xcrun xcresulttool get --path ./TestResults.xcresult --format json --legacy > result.json
          total=$(jq -r '.metrics.testsCount._value' result.json)
          failed=$(jq -r '.metrics.testsFailedCount._value' result.json)
          skipped=$(jq -r '.metrics.testsSkippedCount._value' result.json)
          passed=$((total - failed - skipped))

          TEXT="*üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:*
          ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: $passed
          ‚ùå –£–ø–∞–≤—à–∏—Ö: $failed
          ‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö: $skipped
          üìä –í—Å–µ–≥–æ: $total"

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=97403731 \
            -d text="$TEXT"
